[{"objectID":"Home","href":"examples/index.html#examples","title":"Examples","text":"Examples\n\nThe following examples demonstrate key aspects of Granta MI JobQueue.\n\nTo run these examples, install dependencies with this command:\n\n"},{"objectID":"Home","href":"examples/3_Excel_export_job.html#create-an-excel-export-job","title":"Create an Excel export job","text":"Create an Excel export job\n\nYou use an Excel export job to export data into a properly formatted Excel spreadsheet.\n\nThis example shows how to create an Excel export job request, submit it to the job queue, and interact with the resulting Excel export job object returned by the server.\n\nInformation on how to create a properly formatted Excel export template is outside the scope of this example. For information on the use of Excel for exporting data from Granta MI, see the Granta MI documentation or consult your ACE representative."},{"objectID":"Home","href":"examples/3_Excel_export_job.html#connect-to-granta-mi","title":"Create an Excel export job > Connect to Granta MI","text":"Connect to Granta MI\n\nImport the Connection class and create the connection. For more information, see the Connect and access the job queue example.\n\n\n\n"},{"objectID":"Home","href":"examples/3_Excel_export_job.html#create-an-excelexportjobrequest-object","title":"Create an Excel export job > Create an ExcelExportJobRequest object","text":"Create an ExcelExportJobRequest object\n\nThe first step in exporting an Excel file with the job queue is to create an ExcelExportJobRequest object. When creating this object, specify the name of the job, the Excel export template file, the relevant database, and the records to export. You can also specify an optional description and the scheduled execution date, if the export should be deferred until that date and time.\n\nYou provide the records to export as ExportRecord objects. Records are defined in terms of a record history identity and an optional record version, which are used to identify a previous record version in version-controlled tables. To determine the record history identity, use of the Granta MI Python Scripting Toolkit is recommended. For more information, consult your ACE representative.\n\nYou can provide the Excel export template file as a relative or absolute path, or as a pathlib.Path objects.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/3_Excel_export_job.html#submit-the-job-to-the-server","title":"Create an Excel export job > Submit the job to the server","text":"Submit the job to the server\n\nNext, submit the jobs to the server. There are two methods for submitting job requests:\n\ncreate_job(): Submit the job request to the server and immediately return an AsyncJob object in the pending state.\n\ncreate_job_and_wait(): Submit the job request to the server and block until the job either completes or fails. Return an AsyncJob object in the succeeded or failed state.\n\nThis example uses the create_job_and_wait() method. For an example that shows how to create and submit a job that runs asynchronously, see Schedule and modify jobs.\n\n\n\n"},{"objectID":"Home","href":"examples/3_Excel_export_job.html#access-output-files","title":"Create an Excel export job > Access output files","text":"Access output files\n\nFinally, access the results of the job. Export jobs typically create log files and either a single Excel output file or a ZIP file containing multiple Excel files and/or attachments.\n\nAccess the list of files generated by the job with the output_file_names property. This returns a list of file names.\n\n\n\n\n\n\n\n\n\nIn general, an Excel export job returns two files:\n\n<job name>.log: Log file of the import operation on the server\n\nA file containing the data exported from Granta MI\n\nThe contents of the exported data file depends on the job:\n\nIf one Excel file is generated and no attachments are included in the export, the exported file is the Excel file generated by the export operation.\n\nIf there are multiple Excel files generated, or if attachments are included in the export, the exported file is a ZIP file of all the exported files.\n\nThis cell shows how to access the content of the log file as bytes using the AsyncJob.get_file_content() method:\n\n\n\n\n\n\n\n\n\nThis next cell shows how to download the Excel file to disk using the AsyncJob.download_file() method.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/connection.html#granta-mi-connection","title":"Granta MI connection","text":"Granta MI connection"},{"objectID":"Home","href":"api/connection.html#connection-builder","title":"Granta MI connection > Connection builder","text":"Connection builder\n\n\n\nclass Connection(servicelayer_url, session_configuration=None)\n\nConnects to a Granta MI Server API instance.\n\nThis is a subclass of the ansys.openapi.common.ApiClientFactory class. All methods in\nthis class are documented as returning ApiClientFactory class\ninstances of the ansys.grantami.jobqueue.Connection class.\n\nParameters\n\nservicelayer_url\n\npython:str\n\nBase URL of the Granta MI Service Layer application.\n\nsession_configuration\n\nSessionConfiguration, default: python:None\n\nAdditional configuration settings for the requests session. If None, the\nSessionConfiguration class with default parameters\nis used.\n\nNotes\n\nFor advanced usage, including configuring session-specific properties and timeouts, see the\nOpenAPI-Common API reference documentation.\nSpecifically, see the documentation for the ApiClientFactory\nbase class and the SessionConfiguration class.\n\nCreate the connection builder object and specify the server to connect to.\n\nSpecify the authentication method to use for the connection and provide credentials if\nrequired.\n\nConnect to the server, which returns the client object.\n\nThe examples show this process for different authentication methods.\n\nExamples\n\n>>> client = Connection(\"http://my_mi_server/mi_servicelayer\").with_autologon().connect()\n>>> client\n<JobQueueApiClient: url=http://my_mi_server/mi_servicelayer>\n\n>>> client = (\n...     Connection(\"http://my_mi_server/mi_servicelayer\")\n...     .with_credentials(username=\"my_username\", password=\"my_password\")\n...     .connect()\n... )\n>>> client\n<JobQueueApiClient: url: http://my_mi_server/mi_servicelayer>\n\n\n\nwith_autologon()\n\nSet up client authentication for use with Kerberos (also known as integrated Windows authentication).\n\nThe default operation of this method is to attempt to connect to the API and to use the provided\nWWW-Authenticate header to determine if Negotiate authentication is supported by the server. If so,\nNegotiate will then be used for authentication.\n\nIf Negotiate authentication is not supported by the server, an exception is raised.\n\nReturns\n\nApiClientFactory\n\nCurrent client factory object.\n\nRaises\n\nConnectionError\n\nIf the server does not support Negotiate authentication.\n\nNotes\n\nRequires the user to have a valid Kerberos Ticket-Granting-Ticket (TGT).\n\nOn Windows, this is provided by default.\n\nOn Linux, this requires the [linux-kerberos] extension to be installed and your Kerberos installation\nto be configured correctly.\n\n\n\nwith_credentials(username, password, domain=None, authentication_scheme=AuthenticationScheme.AUTO)\n\nSet up client authentication for use with provided credentials.\n\nThe default operation of this method is to attempt to connect to the API and to use the provided\nWWW-Authenticate header to determine whether NTLM or Basic Authentication should be used. The selected\nauthentication scheme will then be configured for use.\n\nParameters\n\nusername\n\npython:str\n\nUsername for the connection.\n\npassword\n\npython:str\n\nPassword for the connection.\n\ndomain\n\npython:str, optional\n\nDomain to use for connection if required. The default is None.\n\nauthentication_scheme\n\nAuthenticationScheme\n\nThe authentication scheme to use.\n\nAdded in version 2.1.\n\nAdded to\nApiClientFactory.with_credentials\nin version 2.1 of ansys-openapi-common.\n\nReturns\n\nApiClientFactory\n\nOriginal client factory object.\n\nRaises\n\nConnectionError\n\nIf the server does not support Basic or NTLM authentication (Windows clients only).\n\nNotes\n\nNTLM authentication is not currently supported on Linux.\n\n\n\nwith_oidc(idp_session_configuration=None)\n\nSet up client authentication for use with OpenID Connect.\n\nParameters\n\nidp_session_configuration\n\nSessionConfiguration, optional\n\nAdditional configuration settings for the requests session when connected to the OpenID identity provider.\n\nReturns\n\nOIDCSessionBuilder\n\nBuilder object to authenticate via OIDC.\n\nNotes\n\nOIDC Authentication requires the [oidc] extra to be installed.\n\n\n\nwith_anonymous()\n\nSet up client authentication for anonymous use.\n\nThis does not configure any authentication or authorization headers. Users must provide any\nauthentication information required themselves.\n\nClients relying on custom authentication such as client certificates or non-standard tokens\nshould use this method.\n\nReturns\n\nApiClientFactory\n\nOriginal client factory object.\n\n\n\nconnect()\n\nFinalize the JobQueueApiClient client and return it for use.\n\nAuthentication must be configured for this method to succeed.\n\nReturns\n\nJobQueueApiClient\n\nClient object that can be used to connect to Granta MI and interact with the job queue\nAPI."},{"objectID":"Home","href":"api/connection.html#jobqueue-client","title":"Granta MI connection > JobQueue client","text":"JobQueue client\n\n\n\nclass JobQueueApiClient(session, service_layer_url, configuration)\n\nCommunicates with Granta MI.\n\nThis class is instantiated by the Connection class\nand should not be instantiated directly.\n\n\n\n\n\nproperty processing_configuration: JobQueueProcessingConfiguration\n\nCurrent job queue configuration information from the server.\n\nPerforms an HTTP request against the Granta MI Server API.\n\nReturns\n\nJobQueueProcessingConfiguration\n\nCurrent job queue processing configuration on the server.\n\n\n\nproperty is_admin_user: bool\n\nFlag indicating if the current user is an administrator of the job queue.\n\nAdministrators can promote jobs to the top of the queue and interact with other users’ jobs.\n\nPerforms an HTTP request against the Granta MI Server API.\n\nReturns\n\nbool\n\nTrue if the user is an administrator, False otherwise.\n\n\n\nproperty can_write_job: bool\n\nFlag indicating if the current user can create jobs.\n\nPerforms an HTTP request against the Granta MI Server API.\n\nReturns\n\nbool\n\nTrue if the user can create jobs, False otherwise.\n\n\n\nproperty num_jobs: int\n\nNumber of jobs in the job queue, including completed and failed jobs.\n\nPerforms an HTTP request against the Granta MI Server API.\n\nReturns\n\npython:int\n\nNumber of jobs in the job queue.\n\n\n\nproperty jobs: List[AsyncJob]\n\nList of all jobs on the server visible to the current user.\n\nRunning or pending jobs are sorted according to their positions in the queue.\nCompleted or failed jobs are returned last.\n\nPerforms an HTTP request against the Granta MI Server API.\n\nReturns\n\npython:list[AsyncJob]\n\nList of all jobs on the server visible to the current user.\n\n\n\njobs_where(name=None, job_type=None, description=None, submitter_name=None, status=None)\n\nGet a list of jobs on the server matching a query.\n\nRunning or queued jobs are sorted according to their positions in the queue.\nCompleted or failed jobs are returned last.\n\nPerforms an HTTP request against the Granta MI Server API.\n\nParameters\n\nname\n\npython:str, default: python:None\n\nText that must appear in the job name.\n\njob_type\n\nJobType, default: python:None\n\nType of job to search for.\n\ndescription\n\npython:str, default: python:None\n\nText that must appear in the job description.\n\nsubmitter_name\n\npython:str, default: python:None\n\nText that must equal the name of the user who submitted the job.\n\nstatus\n\nJobStatus, default: python:None\n\nStatus of the job.\n\nReturns\n\npython:list of AsyncJob\n\nList of jobs on the server matching the query.\n\n\n\nget_job_by_id(job_id)\n\nGet the job with a given job ID.\n\nParameters\n\njob_id\n\npython:str\n\nJob ID.\n\nReturns\n\nAsyncJob\n\nJob with the given ID.\n\n\n\ndelete_jobs(jobs)\n\nDelete one or more jobs from the server.\n\nParameters\n\njobs\n\npython:list of AsyncJob\n\nList of jobs to delete from the server.\n\n\n\ncreate_job_and_wait(job_request)\n\nCreate a job from an Excel import or export request or from a text import request.\n\nThis method create a job from an ExcelImportJobRequest, ExcelExportJobRequest, or\nTextImportJobRequest object and waits until the job is complete.\n\nThis method also uploads the files included in the job request as a part of the job\nsubmission process.\n\nParameters\n\njob_request\n\nJobRequest\n\nJob request to submit to the job queue.\n\nReturns\n\nAsyncJob\n\nObject representing the completed job.\n\n\n\ncreate_job(job_request)\n\nCreate a job from an Excel import or export request or from a text import request.\n\nThis method creates a job from an ExcelImportJobRequest, ExcelExportJobRequest, or\nTextImportJobRequest object.\n\nThis method also uploads the files included in the job request as a part of the job\nsubmission process.\n\nParameters\n\njob_request\n\nJobRequest\n\nJob request to submit to the server.\n\nReturns\n\nAsyncJob\n\nObject representing the in-progress job."},{"objectID":"Home","href":"index.html#pygranta-jobqueue-130dev0","title":"PyGranta JobQueue 1.3.0.dev0","text":"PyGranta JobQueue 1.3.0.dev0\n\nPyGranta JobQueue, a component of the PyGranta software suite, provides a\nPython interface to the Granta JobQueue API.\n\nGetting started \n\nLearn how to install PyGranta JobQueue in user mode and quickly\nbegin using it.\n\ngetting_started/index\n\nUser guide \n\nUnderstand key concepts for using PyGranta JobQueue.\n\nuser_guide/index\n\nAPI reference \n\nUnderstand how to use Python to interact programmatically with\nPyGranta JobQueue.\n\napi/index\n\nExamples \n\nExplore examples that show how to use PyGranta JobQueue to\nperform many different types of operations.\n\nexamples/index\n\nContribute \n\nLearn how to contribute to the PyGranta JobQueue codebase or documentation.\n\ncontributing\n\n"},{"objectID":"Home","href":"examples/4_Scheduling_and_modifying_jobs.html#schedule-and-modify-jobs","title":"Schedule and modify jobs","text":"Schedule and modify jobs\n\nThis example shows how to create a job request, schedule it for execution in the future, and modify the scheduled job before it completes.\n\nThis example uses an Excel import job, but the functionality demonstrated here can be applied to text import and Excel export jobs."},{"objectID":"Home","href":"examples/4_Scheduling_and_modifying_jobs.html#connect-to-granta-mi","title":"Schedule and modify jobs > Connect to Granta MI","text":"Connect to Granta MI\n\nImport the Connection class and create the connection. For more information, see the Connect and access the job queue example.\n\n\n\n"},{"objectID":"Home","href":"examples/4_Scheduling_and_modifying_jobs.html#create-an-excelimportjobrequest-object","title":"Schedule and modify jobs > Create an ExcelImportJobRequest object","text":"Create an ExcelImportJobRequest object\n\nThis cell creates an Excel import job request and schedules it for execution tomorrow. This example does not contain a full description of the ExcelImportJobRequest object. For more information, see the Create an Excel import job example.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/4_Scheduling_and_modifying_jobs.html#submit-the-job","title":"Schedule and modify jobs > Submit the job","text":"Submit the job\n\nNext, submit the jobs to the server. There are two methods for submitting job requests:\n\ncreate_job(): Submit the job request to the server and immediately return an AsyncJob object in the pending state.\n\ncreate_job_and_wait(): Submit the job request to the server and block until the job either completes or fails. Return an AsyncJob object in the succeeded or failed state.\n\nBecause you have configured the Excel job request object to execute tomorrow, you must use the create_job() method. If you used the create_job_and_wait() method, it would block until the job completed, which means this script would take 24 hours to complete.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/4_Scheduling_and_modifying_jobs.html#list-jobs","title":"Schedule and modify jobs > List jobs","text":"List jobs\n\nUse the .jobs property to list the jobs on the server.\n\n\n\n\n\n\n\n\n\nNote that only jobs that you have access to are included in this property. Non-administrator users can only access and modify their own jobs. Administrator users can access and modify all jobs on the server."},{"objectID":"Home","href":"examples/4_Scheduling_and_modifying_jobs.html#edit-existing-jobs","title":"Schedule and modify jobs > Edit existing jobs","text":"Edit existing jobs\n\nYou can edit the properties of a running or completed job with the associated AsyncJob object. The following cell shows how to update the name and description of the job and to change the scheduled execution to occur immediately.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/4_Scheduling_and_modifying_jobs.html#retrieve-long-running-jobs","title":"Schedule and modify jobs > Retrieve long-running jobs","text":"Retrieve long-running jobs\n\nIf the job is expected to take a long time to complete, you can save the job ID to disk and use it with the client.get_job_by_id() method to check the status of the job later.\n\n\n\n\n\n\n\n\n\nWait for the pending job to complete.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/4_Scheduling_and_modifying_jobs.html#access-output-files","title":"Schedule and modify jobs > Access output files","text":"Access output files\n\nThe job is now complete. You can access the files generated by the job in the same way as for jobs that execute immediately.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/4_Scheduling_and_modifying_jobs.html#delete-a-job","title":"Schedule and modify jobs > Delete a job","text":"Delete a job\n\nYou can delete jobs from the job queue using the .delete_jobs() method. This method accepts a list of jobs, which means that you can delete multiple jobs with a single request if required.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/index.html#api-reference","title":"API reference","text":"API reference\n\nThe API for PyGranta JobQueue comprises these key areas:\n\nref_grantami_jobqueue_connection: Describes how to connect to the Granta MI Server API\nand provides information on the operations available on the client.\n\nref_grantami_jobqueue_models: Describes resources handled by the client.\n\n"},{"objectID":"Release notes","href":"changelog.html#release-notes","title":"Release notes","text":"Release notes\n\nThis document contains the release notes for the project."},{"objectID":"Release notes","href":"changelog.html#120---july-10-2025","title":"Release notes > 1.2.0 - July 10, 2025","text":"1.2.0 - July 10, 2025\n\nFixed\n\n\n\n\n\nFix documentation server for build\n\n#239\n\nDependencies\n\n\n\n\n\nUpdate jinja2 to 3.1.6, cryptography to 44.0.1\n\n#188\n\nUpdate ansys-openapi-common to v2.2.2\n\n#190\n\nBump version to 1.2.0.dev1\n\n#196\n\nTighten serverapi-openapi version specifier\n\n#219\n\nRemove private PyPI references\n\n#220\n\nMiscellaneous\n\n\n\n\n\nPrepare 1.2.0 release\n\n#256\n\nDocumentation\n\n\n\n\n\nBump serverapi-openapi to 2025 R2 development version\n\n#178\n\nTidy up changelog entries\n\n#207\n\nAdd additional detail to ‘output_file_names’ docstring\n\n#208\n\nImprove documentation for Granta MI version support\n\n#215\n\nInclude changelog in documentation\n\n#228\n\nMaintenance\n\n\n\n\n\nFix version number on main branch\n\n#168\n\nchore: update CHANGELOG for v1.1.0\n\n#169\n\nBump codespell to 2.3.0 and fix issues\n\n#176\n\nSupport dependabot PRs while in development\n\n#180\n\nShutdown all VMs after CI is complete\n\n#184\n\nAllow External Code Execution for Dependabot\n\n#185\n\nRun integration tests on previous releases\n\n#186\n\nAdd Granta MI 2024 R1 integration tests\n\n#189\n\nUse PyPI-authored publish action\n\n#210\n\nGenerate provenance attestations\n\n#211\n\nUse git SHA to pin action version\n\n#217\n\nAdd integration checks completeness check\n\n#224\n\nMove release branch to use 25R2 release VM\n\n#226\n\nPrepare 1.2.0rc0 release\n\n#233"},{"objectID":"Release notes","href":"changelog.html#110---2024-12-13","title":"Release notes > 1.1.0 - 2024-12-13","text":"1.1.0 - 2024-12-13\n\nAdded\n\n\n\n\n\nAdd support for virtual paths\n\n#147\n\nChanged\n\n\n\n\n\nDon’t generate changelog fragments for dependabot PRs\n\n#90\n\nUpdate version to v1.1\n\n#92\n\nchore: update CHANGELOG for v1.0.1\n\n#104\n\nDon’t create changelog fragments for pre-commit updates\n\n#121\n\nFixed\n\n\n\n\n\nFix 1.0.2 changelog\n\n#144\n\nDependencies\n\n\n\n\n\nBump ServerAPI to 25R1\n\n#132\n\nUpgrade serverapi-openapi to 4.0.0rc0\n\n#148\n\nBump grantami-serverapi-openapi to 4.0.0\n\n#149\n\nDocumentation\n\n\n\n\n\nFix link to Issues on contribution page\n\n#156\n\nMaintenance\n\n\n\n\n\nAuto-approve pre-commit-ci pull requests\n\n#130\n\nAdd job to release to private PyPI\n\n#133\n\nchore: update CHANGELOG for v1.0.2\n\n#141\n\nAdd release environment in CI and prevent release without successful changelog step\n\n#143\n\nUse Production VM for CI on release branch\n\n#154\n\nPrepare for v1.1.0 release\n\n#167"},{"objectID":"Release notes","href":"changelog.html#102---2024-10-03","title":"Release notes > 1.0.2 - 2024-10-03","text":"1.0.2 - 2024-10-03\n\nChanged\n\n\n\n\n\nUse Release VM\n\n#105\n\nFixed\n\n\n\n\n\nHandle lack of job specific outputs\n\n#139\n\nPrepare 1.0.2 release\n\n#140\n\nDocumentation\n\n\n\n\n\nFix installation example for git dependency\n\n#134\n\nAdd link to supported authentication schemes\n\n#135\n\nAdd link to PyGranta version compatibility documentation\n\n#136\n\nMaintenance\n\n\n\n\n\nImprove VM management in CI\n\n#137"},{"objectID":"Release notes","href":"changelog.html#101---2024-06-10","title":"Release notes > 1.0.1 - 2024-06-10","text":"1.0.1 - 2024-06-10\n\nAdded\n\n\n\n\n\nClarify meaning of JobStatus enum and ensure more import failures result in ‘Failed’ status\n\n#98\n\nChanged\n\n\n\n\n\nCI - 64 - Add doc-changelog action\n\n#78\n\nUse trusted publisher\n\n#102\n\nCherry pick PR #102\n\n#103\n\nDependencies\n\n\n\n\n\nPrepare 1.0.1 release\n\n#101"},{"objectID":"Home","href":"examples/0_Getting_started.html#connect-and-access-the-job-queue","title":"Connect and access the job queue","text":"Connect and access the job queue\n\nThis example shows how to connect to Granta MI and access the job queue. For more information on creating and interacting with jobs, see the subsequent examples."},{"objectID":"Home","href":"examples/0_Getting_started.html#connect-to-granta-mi","title":"Connect and access the job queue > Connect to Granta MI","text":"Connect to Granta MI\n\nFirst, use the ansys.grantami.jobqueue.Connection class to connect to the Granta MI server. The Connection class uses a fluent interface to build the connection, which is always invoked in the following sequence:\n\nSpecify the URL for your Granta MI service layer as a parameter to the Connection class.\n\nSpecify the authentication method using a Connection.with_*() method.\n\nUse the Connection.connect() method to finalize the connection.\n\nThis returns an ansys.grantami.jobqueue.JobQueueApiClient object, which is called client in these examples.\n\n\n\n\n\nIf you are running your Python script on Windows, you are generally able to use .with_autologon().\n\n\n\n\n\n\n\n\n\nIf the Python script is running on Linux without Kerberos enabled, or you want to use an account other than your logged-in account, you can specify credentials explicitly.\n\n\n\n\n\n\n\n\n\nOIDC and anonymous authentication methods are also available, but they are beyond the scope of this example. For more information, see the PyAnsys OpenAPI-Common documentation."},{"objectID":"Home","href":"examples/0_Getting_started.html#access-the-job-queue","title":"Connect and access the job queue > Access the job queue","text":"Access the job queue\n\nYou use the client object to determine the activities that you can perform with the job queue.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou can also access information on how the job queue processes jobs.\n\n\n\n\n\n\n\n\n\nFinally, you can access the job queue itself. The job queue might be empty if no jobs have been submitted recently.)\n\n\n\n\n\n\n\n\n\nNote: The jobs accessible in the queue depend on the user’s role. Standard users can only access their own jobs, whereas administrator users can access jobs created by all users."},{"objectID":"Home","href":"api/models.html#models","title":"Models","text":"Models"},{"objectID":"Home","href":"api/models.html#job-requests","title":"Models > Job requests","text":"Job requests\n\n\n\nclass JobRequest(name, description, template_file, scheduled_execution_date=None)\n\nProvides the abstract base class representing a job request.\n\nEach subclass represents a specific job type and may override some steps of the submission\nprocess. They also add additional file types and properties as required.\n\nParameters\n\nname\n\npython:str\n\nName of the job as shown in the job queue.\n\ndescription\n\nOptional[python:str]\n\nDescription of the job as shown in the job queue.\n\ntemplate_file\n\npython:str or pathlib.Path, default: python:None\n\nTemplate to use the job.\n\nscheduled_execution_date\n\ndatetime.datetime, default: python:None\n\nEarliest date and time to run the job. If no date and time are\nprovided, the job begins as soon as possible.\n\n\n\nclass ExcelExportJobRequest(name, description, template_file, database_key, records, scheduled_execution_date=None)\n\nRepresents an Excel export job request.\n\nAn Excel template and references to the records to export\nare required.\n\nSubclass of JobRequest.\n\nParameters\n\nname\n\npython:str\n\nName of the job as shown in the job queue.\n\ndescription\n\nOptional[python:str]\n\nDescription of the job as shown in the job queue.\n\ntemplate_file\n\npython:str or pathlib.Path\n\nExcel template file.\n\ndatabase_key\n\npython:str\n\nDatabase key for the records to export.\n\nrecords\n\npython:list of ExportRecord\n\nList of objects representing the records to export.\n\nscheduled_execution_date\n\ndatetime.datetime, default: python:None\n\nEarliest date and time to run the job. If no date and time are provided,\nthe job begins as soon as possible.\n\nExamples\n\n>>> template_file: pathlib.Path  # pathlib Path object for the template\n>>> record_history_identities = [12345, 23456]\n>>> job_request = ExcelExportJobRequest(\n...     name=\"Excel export job\",\n...     description=None,\n...     template_file=template_file,\n...     database_key=\"MI_Training\",\n...     records=[ExportRecord(rhid) for rhid in record_history_identities],\n... )\n>>> job_request\n<ExcelExportJobRequest: name: \"Excel export job\">\n\n>>> tomorrow = datetime.datetime.now(datetime.UTC) + datetime.timedelta(days=1)\n>>> job_request = ExcelExportJobRequest(\n...     name=\"Excel export job (future execution)\",\n...     description=\"Example job request to run in the future\",\n...     template_file=template_file,\n...     database_key=\"MI_Training\",\n...     records=[ExportRecord(rhid) for rhid in record_history_identities],\n...     scheduled_execution_date=tomorrow,\n... )\n>>> job_request\n<ExcelExportJobRequest: name: \"Excel export job (future execution)\">\n\n\n\nclass ExcelImportJobRequest(name, description, template_file=None, data_files=None, combined_files=None, attachment_files=None, scheduled_execution_date=None)\n\nRepresents an Excel import job request.\n\nThis class supports either combined imports (with a template and data in the same file)\nor separate data and template imports.\n\nSubclass of JobRequest.\n\nParameters\n\nname\n\npython:str\n\nName of the job as shown in the job queue.\n\ndescription\n\nOptional[python:str]\n\nDescription of the job as shown in the job queue.\n\ntemplate_file\n\npython:str, pathlib.Path, or JobFile, default: python:None\n\nExcel template file.\n\ndata_files\n\npython:list of python:str or pathlib.Path or JobFile, default: python:None\n\nExcel files containing the data to import.\n\ncombined_files\n\npython:list of python:str or pathlib.Path or JobFile, default: python:None\n\nExcel files containing data and template information.\n\nattachment_files\n\npython:list of python:str or pathlib.Path or JobFile, default: python:None\n\nAny other files referenced in the data or combined files.\n\nscheduled_execution_date\n\ndatetime.datetime, default: python:None\n\nEarliest date and time to run the job. If no date and time are\nprovided, the job begins as soon as possible.\n\nNotes\n\nChanged in version 1.1: Path parameters now accept JobFile inputs.\n\nExamples\n\n>>> template_file: pathlib.Path  # pathlib Path object for the template\n>>> job_request = ExcelImportJobRequest(\n...     name=\"Excel import job\",\n...     description=None,\n...     data_files=[\"assets/data_file_1.xlsx\", \"assets/data_file_2.xlsx\"],\n...     template_file=template_file,\n... )\n>>> job_request\n<ExcelImportJobRequest: name: \"Excel import job\">\n\n>>> tomorrow = datetime.datetime.now(datetime.UTC) + datetime.timedelta(days=1)\n>>> job_request = ExcelImportJobRequest(\n...     name=\"Excel import job (future execution)\",\n...     description=\"Example job request to run in the future\",\n...     data_files=[\"assets/data_file_1.xlsx\", \"assets/data_file_2.xlsx\"],\n...     template_file=template_file,\n...     scheduled_execution_date=tomorrow,\n... )\n>>> job_request\n<ExcelImportJobRequest: name: \"Excel import job (future execution)\">\n\n\n\nclass TextImportJobRequest(name, description, template_file=None, data_files=None, attachment_files=None, scheduled_execution_date=None)\n\nRepresents a text import job request.\n\nThis class requires a template file and one or more data files.\n\nSubclass of JobRequest.\n\nParameters\n\nname\n\npython:str\n\nName of the job as shown in the job queue.\n\ndescription\n\nOptional[python:str]\n\nDescription of the job as shown in the job queue.\n\ntemplate_file\n\npython:str or pathlib.Path or JobFile, default: python:None\n\nText import template file.\n\ndata_files\n\npython:list of python:str or pathlib.Path or JobFile, default: python:None\n\nText files containing the data to import.\n\nattachment_files\n\npython:list of python:str or pathlib.Path or JobFile, default: python:None\n\nAny other files referenced in the data files.\n\nscheduled_execution_date\n\ndatetime.datetime, default: python:None\n\nEarliest date and time to run the job. If no date and time are\nprovided, the job begins as soon as possible.\n\nNotes\n\nChanged in version 1.1: Path parameters now accept JobFile inputs.\n\nExamples\n\n>>> template_file: pathlib.Path  # pathlib Path object for the template\n>>> job_request = TextImportJobRequest(\n...     name=\"Text import job\",\n...     description=None,\n...     template_file=template_file,\n...     data_files=[\"Data_File_1.txt\", \"Data_File_2.txt\"],  # Relative paths\n... )\n>>> job_request\n<TextImportJobRequest: name: \"Text import job\">\n\n>>> tomorrow = datetime.datetime.now(datetime.UTC) + datetime.timedelta(days=1)\n>>> job_request = TextImportJobRequest(\n...     name=\"Text import job (future execution)\",\n...     description=\"Example job request to run in the future\",\n...     template_file=template_file,\n...     data_files=[\"Data_File_1.txt\", \"Data_File_2.txt\"],\n...     scheduled_execution_date=tomorrow,\n... )\n>>> job_request\n<TextImportJobRequest: name: \"Text import job (future execution)\">"},{"objectID":"Home","href":"api/models.html#jobs","title":"Models > Jobs","text":"Jobs\n\n\n\nclass AsyncJob(job_obj, job_queue_api)\n\nBase class that represents a job on the server.\n\nThis class provides information on the current status of the job and any\njob-specific outputs. It allows modification of job metadata, such as the job\nname, description, and scheduled execution date.\n\n\n\n\n\nclassmethod create_job(job_obj, job_queue_api)\n\nCreate an instance of a JobQueue AsyncJob subclass.\n\nReturns\n\nAsyncJob\n\nThe appropriate AsyncJob subclass based on the response from the server.\n\nNotes\n\nDo not use this method to create an AsyncJob object. The\ncreate_job() and\ncreate_job_and_wait() methods should be used instead, which\nwill return correctly-instantiated AsyncJob objects.\n\n\n\nproperty id: str\n\nUnique job ID, which is the tecommended way to refer to individual jobs.\n\nReturns\n\npython:str\n\nUnique ID of the job.\n\n\n\nproperty name: str\n\nDisplay name of the job, which does not have to be unique.\n\nReturns\n\npython:str\n\nDisplay name of the job.\n\n\n\nupdate_name(value)\n\nUpdate the display name of the job on the server.\n\nThis method performs an HTTP request against the Granta MI Server API.\n\nParameters\n\nvalue\n\npython:str\n\nNew name for the job.\n\nRaises\n\nValueError\n\nIf the job has been deleted from the server.\n\n\n\nproperty description: str | None\n\nDescription of the job as shown in Granta MI.\n\nReturns\n\npython:str or python:None\n\nDescription of the job.\n\n\n\nupdate_description(value)\n\nUpdate the job description on the server.\n\nThis method performs an HTTP request against the Granta MI Server API.\n\nParameters\n\nvalue\n\npython:str\n\nNew description for the job.\n\nRaises\n\nValueError\n\nIf the job has been deleted from the server.\n\n\n\nproperty status: JobStatus\n\nJob status of the job on the server.\n\nReturns\n\nJobStatus\n\nStatus of the job.\n\nNotes\n\nA return value of JobStatus.Succeeded does not mean that the import or export\noperation itself was successful, it only means that the job was successfully\nattempted. For more detailed information on the job status, check the contents of the\nAsyncJob.output_information property.\n\n\n\nproperty type: JobType\n\nType of the job on the server.\n\nReturns\n\nJobType\n\nType of the job.\n\n\n\nproperty position: int | None\n\nPosition of the job in the job queue.\n\nReturns\n\npython:int or python:None\n\nPosition of the job in the job queue or None if the job is not\ncurrently pending.\n\n\n\nmove_to_top()\n\nPromote the job to the top of the job queue.\n\nTo use this method, you must have MI_ADMIN permission.\n\n\n\n\n\nproperty submitter_information: Dict[str, str | datetime | List[str]]\n\nInformation about the job submission.\n\nReturns\n\npython:dict\n\nDictionary of job submission information with the username of the submitter,\ndate and time of submission, and the roles that the submitter belongs to\n(indexed by name).\n\n\n\nproperty completion_date_time: datetime | None\n\nDate and time of job completion.\n\nReturns\n\ndatetime.datetime or python:None\n\nDate and time of job completion or None if the job is pending.\n\n\n\nproperty execution_date_time: datetime | None\n\nDate and time that the job was run.\n\nReturns\n\ndatetime.datetime or python:None\n\nDate and time that the job was run or None if the job is pending.\n\n\n\nproperty scheduled_execution_date_time: datetime | None\n\nDate and time that the job is scheduled to run.\n\nReturns\n\ndatetime.datetime or python:None\n\nDate and time that the job is scheduled to run or None if the job is not scheduled.\n\n\n\nupdate_scheduled_execution_date_time(value)\n\nUpdate the date and time that the job is scheduled to run on the server.\n\nPerforms an HTTP request against the Granta MI Server API.\n\nParameters\n\nvalue\n\ndatetime.datetime\n\nNew date and time that the job is scheduled to run.\n\nRaises\n\nValueError\n\nIf the job has been deleted from the server.\n\n\n\nproperty output_information: Dict[str, Any] | None\n\nAdditional output information provided by the job (if supported by the job type).\n\nAdditional output information typically includes record placement, a summary of the\nsuccess of the job, and more verbose logging. The additional information supported is\ndependent on the job.\n\nReturns\n\npython:dict or python:None\n\nAdditional output information provided by the job.\n\n\n\nproperty output_file_names: List[str] | None\n\nList of names of the job’s output files.\n\nReturns\n\npython:list of python:str or python:None\n\nList of the job’s output files or None if the job has no output files.\n\nThe files generated by a job are not included in the underlying API definition, and so are not considered\nstable. Possible variations include:\n\nThe list varying in length, or expected files not appearing in the list.\n\nFiles appearing in a different order between runs.\n\nIn addition, a JSON data file containing job summary information is included for jobs running on Granta MI 2025\nR1 and earlier. The information this file contains is also available in AsyncJob.output_information for\nall supported Granta MI versions.\n\nNotes\n\nThe files returned are:\n\nImport jobs:\n\nA log of the job execution as a text file with the name as the value of AsyncJob.name and\nthe extension .log.\n\nExport jobs:\n\nThe exported data as a file with the name as the value of AsyncJob.name. The extension, and therefore\nthe file type, depends on the exported data:\n\nIf a single file is generated, the file type depends on the type of the Export template. For example, an\n.xlsm template will result in an .xlsm exported file.\n\nIf multiple files are generated, the file is a .zip archive. An export job may generate multiple files\nbecause files and pictures were included in the export, or because multiple records were exported to\nindividual output files.\n\nA log of the job execution with the filename <job name>.log, where <job name> is the value of\nAsyncJob.name.\n\n\n\ndownload_file(remote_file_name, file_path)\n\nDownload an output file from the server by name and save it to a specified location.\n\nPerforms an HTTP request against the Granta MI Server API.\n\nParameters\n\nremote_file_name\n\npython:str\n\nFilename provided by the output_file_names() method.\n\nfile_path\n\npython:str or pathlib.Path\n\nPath to save the file to.\n\nRaises\n\nKeyError\n\nIf the filename does not exist for this job.\n\nValueError\n\nIf the job has been deleted from the server.\n\nExamples\n\n>>> job: AsyncJob\n>>> folder = pathlib.Path(r\"C:\\path\\to\\folder\")  # or Linux equivalent\n>>> for file_name in job.output_file_names:\n...     job.download_file(file_name, folder / file_name)\n>>> print(list(folder.iterdir()))\n[Path(C:/path/to/folder/output_1.json), Path(C:/path/to/folder/output_...\n\n\n\nget_file_content(remote_file_name)\n\nDownload an output file from the server by name and return the file contents.\n\nPerforms an HTTP request against the Granta MI Server API.\n\nParameters\n\nremote_file_name\n\npython:str\n\nFilename provided by the output_file_names() method.\n\nReturns\n\nbytes\n\nContent of the specified file.\n\nRaises\n\nKeyError\n\nIf the filename does not exist for this job.\n\nValueError\n\nIf the job has been deleted from the server.\n\nExamples\n\n>>> job: AsyncJob\n>>> file_content = {}\n>>> for file_name in job.output_file_names:\n...     file_content[file_name] = job.get_file_content(file_name)\n>>> print(file_content)\n{'output_1.log': b'2024-03-11 17:24:16,342 [396] INFO  Task started:...\n\n\n\nupdate()\n\nUpdate the job from the server.\n\nRaises\n\nValueError\n\nIf the job has been deleted from the server.\n\n\n\nclass ImportJob(job_obj, job_queue_api)\n\nRepresents an import job on the server. Subclass of AsyncJob.\n\nObjects of this type are returned from the create_job() and\ncreate_job_and_wait() methods after submitting a\nExcelImportJobRequest or TextImportJobRequest to the server.\n\nNotes\n\nDo not instantiate this class directly.\n\nAdded in version 1.0.1.\n\n\n\n\n\nproperty status: JobStatus\n\nJob status of the job on the server.\n\nReturns\n\nJobStatus\n\nStatus of the job.\n\nNotes\n\nA return value of JobStatus.Succeeded does not mean that the import or export\noperation itself was successful, it only means that the job was successfully\nattempted. For more detailed information on the job status, check the contents of the\nAsyncJob.output_information property.\n\n\n\nclass ExportJob(job_obj, job_queue_api)\n\nRepresents an export job on the server. Subclass of AsyncJob.\n\nObjects of this type are returned from the create_job() and\ncreate_job_and_wait() methods after submitting a\nExcelExportJobRequest to the server.\n\nNotes\n\nDo not instantiate this class directly.\n\nAdded in version 1.0.1.\n\n"},{"objectID":"Home","href":"api/models.html#other-models","title":"Models > Other models","text":"Other models\n\n\n\nclass JobFile(path, virtual_path)\n\nRepresents a file associated with a JobRequest.\n\nJobFile can be used instead of paths in import requests. This allows building a virtual file structure for the\nimport, to work around some path limitations and makes working with attachments easier.\n\nAdded in version 1.1.\n\nParameters\n\npath\n\npython:str or pathlib.Path\n\nPath to the local file to use in a JobRequest. Can be absolute or relative.\n\nvirtual_path\n\npython:str or pathlib.Path\n\nVirtual path to use to refer to the file in the JobRequest. Must be relative.\n\nExamples\n\nUsing an import template from a shared network location and placing it at the root of the isolated job environment.\n\n>>> template_file = JobFile(pathlib.Path(r\"\\\\server\\share\\Tensile_Import_Template_v1.xslx\"), \"template.xslx\")\n\nJobFiles can be used to set up a file structure that matches the expectation of the import, without moving or\ncopying files to the client machine or requiring the script to run in a specific location. For example, if the Excel\nor text import template is configured to import a picture to a Picture attribute, the data file includes a reference\nto the picture by relative path, e.g. /assets/panel_front.jpg.\n\n>>> data_file = JobFile(pathlib.Path(r\"C:\\test_results\\tensile\\sample_001\\data.xslx\"), \"data.xslx\")\n>>> attachment_file = JobFile(pathlib.Path(r\"C:\\test_results\\pictures\\sample_001\\panel_front.png\"), \"./assets/panel_front.png\")\n\n\n\nclass ExportRecord(record_history_identity, record_version=None)\n\nDefines a record to include in an export job.\n\nParameters\n\nrecord_history_identity\n\npython:int\n\nHistory identities of a record to export. You can find history identities\nin the Granta MI Viewer or using the Scripting Toolkit.\n\nrecord_version\n\npython:int, default: python:None\n\nSpecific version of the record to export. If no version is specified for\nversion-controlled records, the latest available version for the current\nuser is exported.\n\n\n\nclass JobQueueProcessingConfiguration(purge_job_age_in_milliseconds, purge_interval_in_milliseconds, polling_interval_in_milliseconds, concurrency)\n\nProvides a read-only configuration of the job queue on the server.\n\nParameters\n\npurge_job_age_in_milliseconds\n\npython:int\n\nAge at which to automatically remove jobs from the queue.\n\npurge_interval_in_milliseconds\n\npython:int\n\nTime between purge operations.\n\npolling_interval_in_milliseconds\n\npython:int\n\nIdle time before executing the next job in the queue.\n\nconcurrency\n\npython:int\n\nMaximum number of jobs to process concurrently.\n\n\n\nenum JobStatus(value)\n\nProvides possible states of a job in the job queue.\n\nValid values are as follows:\n\n\n\nPending = <JobStatus.Pending: 'Pending'>\n\nJob is in the queue.\n\n\n\nRunning = <JobStatus.Running: 'Running'>\n\nJob is currently executing.\n\n\n\nSucceeded = <JobStatus.Succeeded: 'Succeeded'>\n\nJob has completed (does not guarantee that no errors occurred).\n\n\n\nFailed = <JobStatus.Failed: 'Failed'>\n\nJob could not complete.\n\n\n\nCancelled = <JobStatus.Cancelled: 'Cancelled'>\n\nJob was cancelled by the user.\n\n\n\nDeleted = <JobStatus.Deleted: 'Deleted'>\n\nJob was deleted on the server.\n\n\n\nenum JobType(value)\n\nProvides possible job types.\n\nValid values are as follows:\n\n\n\nExcelImportJob = <JobType.ExcelImportJob: 'ExcelImportJob'>\n\n\n\n\n\nExcelExportJob = <JobType.ExcelExportJob: 'ExcelExportJob'>\n\n\n\n\n\nTextImportJob = <JobType.TextImportJob: 'TextImportJob'>\n\n"},{"objectID":"Home","href":"examples/1_Excel_import_job.html#create-an-excel-import-job","title":"Create an Excel import job","text":"Create an Excel import job\n\nYou use an Excel import job to import data from a properly formatted Excel spreadsheet.\n\nThis example shows how to create an Excel import job request, submit it to the job queue, and interact with the resulting Excel import job object returned by the server.\n\nInformation on how to create a properly formatted Excel import template is outside the scope of this example. For information on using Excel to import data into Granta MI, see the Granta MI documentation or consult your ACE representative."},{"objectID":"Home","href":"examples/1_Excel_import_job.html#connect-to-granta-mi","title":"Create an Excel import job > Connect to Granta MI","text":"Connect to Granta MI\n\nImport the Connection class and create the connection. For more information, see the Connect and access the job queue example.\n\n\n\n"},{"objectID":"Home","href":"examples/1_Excel_import_job.html#create-an-excelimportjobrequest-object","title":"Create an Excel import job > Create an ExcelImportJobRequest object","text":"Create an ExcelImportJobRequest object\n\nThe first step in importing an Excel file with the job queue is to create an ExcelImportJobRequest object. When creating this object, specify the name of the job and the files to import. You can also specify an optional description and the scheduled execution date, if the import should be deferred until that date and time.\n\nDifferent job types require different input files. For example, an Excel import can use a template, one or more data files, or combined files, which include both the template and data files. You should specify any additional files to imported as file or picture attributes as attachment files. You can provide these additional files as relative or absolute paths or as pathlib.Path objects.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/1_Excel_import_job.html#submit-the-job-to-the-server","title":"Create an Excel import job > Submit the job to the server","text":"Submit the job to the server\n\nNext, submit the jobs to the server. There are two methods for submitting job requests:\n\ncreate_job(): Submit the job request to the server and immediately return an AsyncJob object in the pending state.\n\ncreate_job_and_wait(): Submit the job request to the server and block until the job either completes or fails. Return an AsyncJob object in the succeeded or failed state.\n\nThis example uses the create_job_and_wait() method. For an example that shows how to create and submit a job that runs asynchronously, see Schedule and modify jobs.\n\n\n\n"},{"objectID":"Home","href":"examples/1_Excel_import_job.html#access-output-files","title":"Create an Excel import job > Access output files","text":"Access output files\n\nFinally, access the results of the job. Import jobs typically create log files, but the exact type of files generated varies based on the type of import template. In this case, the files are all plain text.\n\nAccess the list of files generated by the job with the output_file_names property. This returns a list of file names.\n\n\n\n\n\n\n\n\n\nIn general, an Excel import job includes a log of the import operation on the server as <job name>.log.\n\nThis cell shows how to access the content of the log file as bytes using the AsyncJob.get_file_content() method:\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"getting_started/index.html#getting-started","title":"Getting started","text":"Getting started\n\n"},{"objectID":"Home","href":"getting_started/index.html#software-requirements","title":"Getting started > Software requirements","text":"Software requirements\n\nThis version of the ansys.grantami.jobqueue package requires Granta MI 2024 R2 or newer. Use\nthe PyGranta documentation to find the\nversion of this package compatible with older Granta MI versions.\n\nThe ansys.grantami.jobqueue package currently supports Python from version 3.10 to version 3.13."},{"objectID":"Home","href":"getting_started/index.html#installation","title":"Getting started > Installation","text":"Installation\n\nTo install the latest PyGranta JobQueue release from PyPI,\nrun this command:\n\nTo install a release compatible with a specific version of Granta MI, install the\nPyGranta metapackage with a requirement specifier:\n\nTo see which individual PyGranta package versions are installed with each version of the PyGranta metapackage, consult\nthe Package versions section of the PyGranta\ndocumentation.\n\nAlternatively, to install the latest development version from the PyGranta JobQueue repository,\nrun this command:\n\nTo install a local development version with Git and Poetry, run these commands:\n\nThe preceding commands install the package in development mode so that you can modify\nit locally. Your changes are reflected in your Python setup after restarting the Python kernel."},{"objectID":"Home","href":"getting_started/index.html#verify-your-installation","title":"Getting started > Verify your installation","text":"Verify your installation\n\nTo verify that you can start the PyGranta JobQueue client from Python, run this code:\n\nThis example uses Windows-based autologon authentication. For all supported authentication schemes, see the OpenAPI-Common documentation.\n\nIf you see a response from the server, you have successfully installed PyGranta JobQueue and\ncan start using the JobQueue client. For more examples, see ref_grantami_jobqueue_examples.\nFor comprehensive information on the API, see ref_grantami_jobqueue_api_reference.\n\nIf you are migrating from the Granta MI Scripting Toolkit AsyncJobs submodule, see ref_migration."},{"objectID":"Home","href":"user_guide/index.html#user-guide","title":"User guide","text":"User guide"},{"objectID":"Home","href":"user_guide/index.html#migrate-from-asyncjobs","title":"User guide > Migrate from AsyncJobs","text":"Migrate from AsyncJobs\n\nThe import and export tools in PyGranta JobQueue were previously available in the Granta MI\nScripting Toolkit AsyncJobs submodule, which this documentation refers to as AsyncJobs. As\nof the Granta MI 2024 R2 release, however, these import and export tools are available only\nin PyGranta JobQueue.\n\nIn addition to providing a summary of the differences between AsyncJobs and PyGranta JobQueue,\nthis section shows how to modify your existing AsyncJobs scripts to work in PyGranta JobQueue.\n\nBecause PyGranta JobQueue is PEP 561-compliant, you can use Mypy\nor most modern Python IDEs to statically validate AsyncJobs scripts against PyGranta JobQueue. This\nhighlights issues without needing to run the code.\n\n"},{"objectID":"Home","href":"user_guide/index.html#connect-to-granta-mi","title":"User guide > Connect to Granta MI","text":"Connect to Granta MI\n\n\n\nAsyncJobs relied on an existing Granta MI Scripting Toolkit connection to connect to the job queue.\nPyGranta JobQueue uses the PyGranta approach to creating a client.\n\nYour existing AsyncJobs code looks like this:\n\nReplace the preceding code with this code:\n\nFor information on how to connect to Granta MI using other authentication\nmethods, see ref_grantami_jobqueue_connection in the API reference documentation."},{"objectID":"Home","href":"user_guide/index.html#create-a-job-request","title":"User guide > Create a job request","text":"Create a job request\n\nThere are some minor modifications to the JobRequest object and its concrete subclasses:\n\nOnly the pathlib.Path object and string values for file inputs are permitted.\nFile objects are no longer allowed.\n\nThe templates keyword argument has changed to template and only accepts a single\nvalue."},{"objectID":"Home","href":"user_guide/index.html#submit-a-job-request-to-the-queue","title":"User guide > Submit a job request to the queue","text":"Submit a job request to the queue\n\nThe AsyncJobQueue methods for creating jobs are renamed to reflect that jobs can\nbe import or export jobs:\n\nAsyncJobQueue.create_import_job_and_wait is renamed to JobQueueApiClient.create_job_and_wait().\n\nAsyncJobQueue.create_import_job is renamed to JobQueueApiClient.create_job()."},{"objectID":"Home","href":"user_guide/index.html#query-the-job-queue","title":"User guide > Query the job queue","text":"Query the job queue\n\nTwo AsyncJob attributes for querying the job queue have changed type:\n\nThe AsyncJob.status attribute returns a member of the JobStatus class instead of a string.\n\nThe AsyncJob.type attribute returns a member of the JobType class instead of a string.\n\nThe jobs_where() method, which accepted str values for the\njob_type and status keyword arguments, are changed to enumerations. Thus, you must\nprovide members of the JobType and JobStatus classes."},{"objectID":"Home","href":"examples/2_Text_import_job.html#create-a-text-import-job","title":"Create a text import job","text":"Create a text import job\n\nYou use a text import job to import data from a plain text file with an accompanying import template.\n\nThis example shows how to create a text import job request, submit it to the job queue, and interact with the resulting text import job object returned by the server.\n\nInformation on how to create a text import template is outside the scope of this example. For information on how to import plain text data into Granta MI, see the Granta MI documentation or consult your ACE representative."},{"objectID":"Home","href":"examples/2_Text_import_job.html#connect-to-granta-mi","title":"Create a text import job > Connect to Granta MI","text":"Connect to Granta MI\n\nImport the Connection class and create the connection. For more information, see the Connect and access the job queue example.\n\n\n\n"},{"objectID":"Home","href":"examples/2_Text_import_job.html#create-a-textimportjobrequest-object","title":"Create a text import job > Create a TextImportJobRequest object","text":"Create a TextImportJobRequest object\n\nThe first step in importing a text file with the job queue is to create a TextImportJobRequest object. When creating this object, specify the name of the job and the files to import. You can also specify an optional description and the scheduled execution date, if the import should be deferred until that date and time.\n\nA text import job requires data files, template files, and optionally additional files to be uploaded as attachments. These can be provided as relative or absolute paths or as pathlib.Path objects.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/2_Text_import_job.html#submit-the-job-to-the-server","title":"Create a text import job > Submit the job to the server","text":"Submit the job to the server\n\nNext, submit the jobs to the server. There are two methods for submitting job requests:\n\ncreate_job(): Submit the job request to the server and immediately return an AsyncJob object in the pending state.\n\ncreate_job_and_wait(): Submit the job request to the server and block until the job either completes or fails. Return an AsyncJob object in the succeeded or failed state.\n\nThis example uses the create_job_and_wait() method. For an example that shows how to create and submit a job that runs asynchronously, see Schedule and modify jobs.\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/2_Text_import_job.html#access-output-files","title":"Create a text import job > Access output files","text":"Access output files\n\nFinally, access the results of the job. Import jobs typically create log files, but the exact type of files generated varies based on the type of import template. In this case, the files are all plain text.\n\nAccess the list of files generated by the job with the output_file_names property. This returns a list of file names.\n\n\n\n\n\n\n\n\n\nIn general, a text import job includes a log of the import operation on the server as <job name>.log.\n\nThis cell shows how to access the content of the log file as bytes using the AsyncJob.get_file_content() method:\n\n\n\n\n\n\n\n"},{"objectID":"Contribute","href":"contributing.html#contribute","title":"Contribute","text":"Contribute"},{"objectID":"Contribute","href":"contributing.html#general-guidelines","title":"Contribute > General guidelines","text":"General guidelines\n\nOverall guidance on contributing to a PyAnsys library appears in the\nContributing topic\nin the PyAnsys developer’s guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to PyGranta JobQueue.\n\nThe following contribution information is specific to PyGranta JobQueue."},{"objectID":"Contribute","href":"contributing.html#developer-environment-setup","title":"Contribute > Developer environment setup","text":"Developer environment setup\n\nPyGranta JobQueue uses Poetry for packaging and dependency management. Installation\ninformation is available in the Poetry documentation.\n\nInstalling PyGranta JobQueue in developer mode allows you to modify and enhance\nthe source."},{"objectID":"Contribute","href":"contributing.html#clone-the-source-repository","title":"Contribute > Clone the source repository","text":"Clone the source repository\n\nRun the following commands to clone and install the latest version of PyGranta JobQueue\nin editable mode, which ensures changes to the code are immediately visible in the environment.\nRunning these commands also installs the required development dependencies to run the tests,\nbuild the documentation, and build the package."},{"objectID":"Contribute","href":"contributing.html#additional-tools","title":"Contribute > Additional tools","text":"Additional tools\n\n"},{"objectID":"Contribute","href":"contributing.html#pre-commit","title":"Contribute > Pre-commit","text":"Pre-commit\n\nThe style checks take advantage of pre-commit. Developers are not forced but\nencouraged to install this tool with this command:\n\n"},{"objectID":"Contribute","href":"contributing.html#tox","title":"Contribute > Tox","text":"Tox\n\nTests can be run using tox. The project defines the tox environments in the tox.ini\nfile. The following tox environments are provided:\n\ntox -e style: Checks for coding style quality.\n\ntox -e tests: Runs all tests and checks code coverage. (For requirements, see ref_serveraccess.)\n\ntox -e doc: Checks the documentation-building process.\n\nOptionally, add the -- -m \"not integration\" suffix to the commands above to skip integration\ntests. For example, this command only runs tests that do not require a Granta MI instance:\n\n"},{"objectID":"Contribute","href":"contributing.html#server-access","title":"Contribute > Server access","text":"Server access\n\nAs indicated in ref_software_requirements, running integration tests and building the examples\nrequires access to a valid Granta MI instance.\n\nExternal contributors may not have an instance of Granta MI at their disposal. Prior to creating a\npull request with the desired changes, they should make sure that unit tests pass (ref_tox),\nstatic code validation and styling pass (pre-commit), and that the\ndocumentation can be generated successfully without the examples\n(Documenting).\n\nContinuous Integration (CI) on GitHub is configured to run the integration tests and generate the\nfull documentation on creation and updates of pull requests. CI is not configured to run for pull\nrequests from forks. External contributions require approval from a maintainer for checks to run."},{"objectID":"Contribute","href":"contributing.html#code-formatting-and-styling","title":"Contribute > Code formatting and styling","text":"Code formatting and styling\n\nThis project adheres to PyAnsys styling and formatting recommendations. The easiest way to\nvalidate changes are compliant is to run this command:\n\n"},{"objectID":"Contribute","href":"contributing.html#documenting","title":"Contribute > Documenting","text":"Documenting\n\nAs per PyAnsys guidelines, the documentation is generated using Sphinx.\n\nFor building documentation, use the Sphinx Makefile:\n\nIf any changes have been made to the documentation, you should run\nSphinx directly with the following extra arguments:\n\nThe extra arguments ensure that all references are valid and turn warnings\ninto errors. CI uses the same configuration, so you should resolve any\nwarnings and errors locally before pushing changes."},{"objectID":"Contribute","href":"contributing.html#example-notebooks","title":"Contribute > Example notebooks","text":"Example notebooks\n\nExamples are included in the documentation to give you more context around\nthe core capabilities described in ref_grantami_jobqueue_api_reference.\nAdditional examples are welcomed, especially if they cover a key use case of the\npackage that has not yet been covered.\n\nThe example scripts are placed in the examples directory and are included\nin the documentation build if the environment variable BUILD_EXAMPLES is set\nto True. Otherwise, a different set of examples is run to validate the process.\n\nExamples are checked in as scripts using the light format. For more information,\nsee the Jupytext documentation. As part of the documentation-building\nprocess, the Python files are converted back into Jupyter notebooks and the output\ncells are populated by running the notebooks against a Granta MI instance.\n\nThis conversion between Jupyter notebooks and Python files is performed by\nnb-convert. Installation information is available in the nb-convert documentation."},{"objectID":"Contribute","href":"contributing.html#post-issues","title":"Contribute > Post issues","text":"Post issues\n\nUse the PyGranta JobQueue Issues page\nto report bugs and request new features. When possible, use the issue templates provided. If\nyour issue does not fit into one of these templates, click the link for opening a blank issue.\n\nIf you have general questions about the PyAnsys ecosystem, email pyansys.core@ansys.com.\nIf your question is specific to PyGranta JobQueue, ask your question in an issue as described in\nthe previous paragraph.\n\n\n\n\n\n\n\n\n\n\n\n"}]